/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
<<<<<<< HEAD
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,32],$V2=[1,33],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,37],$V7=[1,22],$V8=[1,24],$V9=[1,25],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,26],$Ve=[1,27],$Vf=[1,31],$Vg=[5,28,33,34,35,36,37,38,63,71,72,74,75,76,77,78,79,80],$Vh=[1,61],$Vi=[1,62],$Vj=[1,63],$Vk=[1,60],$Vl=[1,68],$Vm=[1,72],$Vn=[1,70],$Vo=[1,71],$Vp=[1,80],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,81],$Vw=[8,26,32],$Vx=[2,37],$Vy=[1,105],$Vz=[1,104],$VA=[1,106],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[1,110],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[1,116],$VL=[8,30,32,39,40,41,42,43,46,54,55,57,58,59,60,61,62,64],$VM=[32,46],$VN=[8,46],$VO=[8,73,74],$VP=[8,30,32,39,40,46,54,55,57,58,59,60,61,62,64],$VQ=[8,30,32,46,54,55,57,58,59,60,61,62,64],$VR=[1,192],$VS=[30,32];
=======
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,32],$V2=[1,33],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,37],$V7=[1,22],$V8=[1,24],$V9=[1,25],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,26],$Ve=[1,27],$Vf=[1,31],$Vg=[5,28,33,34,35,36,37,38,63,71,72,74,75,76,77,78,79,80],$Vh=[1,61],$Vi=[1,62],$Vj=[1,63],$Vk=[1,60],$Vl=[1,68],$Vm=[1,72],$Vn=[1,70],$Vo=[1,71],$Vp=[1,80],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,81],$Vw=[8,26,32],$Vx=[2,37],$Vy=[1,105],$Vz=[1,104],$VA=[1,106],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[1,110],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[1,116],$VL=[8,30,32,39,40,41,42,43,46,54,55,57,58,59,60,61,62,64],$VM=[32,46],$VN=[8,46],$VO=[8,73,74],$VP=[8,30,32,39,40,46,54,55,57,58,59,60,61,62,64],$VQ=[8,30,32,46,54,55,57,58,59,60,61,62,64],$VR=[1,187],$VS=[30,32];
>>>>>>> feb08420f3d7f1fa17723d7836599f677f8d7bb8
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"star":3,"instrucciones":4,"EOF":5,"ins":6,"declarar":7,"PYC":8,"declarar_arr":9,"print":10,"llamada_func":11,"fn_func":12,"func_if":13,"c_while":14,"asign":15,"c_for":16,"c_dowhile":17,"ins_break":18,"ins_conti":19,"ins_ret":20,"fun_dec":21,"fun_inc":22,"func_exec":23,"tipo":24,"ids":25,"IG":26,"exp":27,"ID":28,"CORCHIZQ":29,"CORCHDER":30,"list_val":31,"COMA":32,"INT":33,"CHAR":34,"DOUBLE":35,"BOOL":36,"STD_STRING":37,"VOID":38,"MENOS":39,"MAS":40,"POR":41,"DIV":42,"MOD":43,"POW":44,"PARIZQ":45,"PARDER":46,"V_BOOL":47,"V_CADENA":48,"V_CHAR":49,"V_DOUBLE":50,"V_INT":51,"oplogicos":52,"oprelacionales":53,"AND":54,"OR":55,"NOT":56,"MAQ":57,"MEQ":58,"MAOIGQ":59,"MEOIGQ":60,"DIFQ":61,"IGQ":62,"COUT":63,"DPA":64,"ENDL":65,"bloque":66,"params":67,"param":68,"list_exp":69,"CORIZQ":70,"CORDER":71,"IF":72,"ELSE":73,"WHILE":74,"BREAK":75,"CONTINUE":76,"RETURN":77,"FOR":78,"DO":79,"EXECUTE":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",26:"IG",28:"ID",29:"CORCHIZQ",30:"CORCHDER",32:"COMA",33:"INT",34:"CHAR",35:"DOUBLE",36:"BOOL",37:"STD_STRING",38:"VOID",39:"MENOS",40:"MAS",41:"POR",42:"DIV",43:"MOD",44:"POW",45:"PARIZQ",46:"PARDER",47:"V_BOOL",48:"V_CADENA",49:"V_CHAR",50:"V_DOUBLE",51:"V_INT",54:"AND",55:"OR",56:"NOT",57:"MAQ",58:"MEQ",59:"MAOIGQ",60:"MEOIGQ",61:"DIFQ",62:"IGQ",63:"COUT",64:"DPA",65:"ENDL",70:"CORIZQ",71:"CORDER",72:"IF",73:"ELSE",74:"WHILE",75:"BREAK",76:"CONTINUE",77:"RETURN",78:"FOR",79:"DO",80:"EXECUTE"},
<<<<<<< HEAD
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[7,2],[7,4],[9,4],[9,8],[9,6],[9,16],[31,3],[31,1],[15,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[25,3],[25,1],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,6],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,4],[27,7],[27,1],[27,1],[27,3],[52,3],[52,3],[52,2],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[10,3],[10,5],[12,5],[12,6],[68,2],[67,3],[67,1],[11,3],[11,4],[69,3],[69,1],[66,3],[66,2],[13,5],[13,7],[13,7],[14,5],[18,1],[19,1],[20,2],[21,3],[22,3],[16,9],[16,9],[17,6],[23,2]],
=======
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[7,2],[7,4],[9,4],[9,8],[9,6],[9,16],[31,3],[31,1],[15,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[25,3],[25,1],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,6],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,3],[52,3],[52,3],[52,2],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[10,3],[10,5],[12,5],[12,6],[68,2],[67,3],[67,1],[11,3],[11,4],[69,3],[69,1],[66,3],[66,2],[13,5],[13,7],[13,7],[14,5],[18,1],[19,1],[20,2],[21,3],[22,3],[16,9],[16,9],[17,6],[23,2]],
>>>>>>> feb08420f3d7f1fa17723d7836599f677f8d7bb8
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new AST($$[$0-1]);
break;
case 2:
console.log('Error Sintactico: ' + yytext + ' - linea: ' + this._$.first_line  + ' - columna: ' + this._$.first_column);
break;
case 3:
$$[$0-1].push($$[$0]);this.$=$$[$0-1] 
break;
<<<<<<< HEAD
case 4: case 28: case 37: case 71: case 75:
=======
case 4: case 28: case 37: case 69: case 73:
>>>>>>> feb08420f3d7f1fa17723d7836599f677f8d7bb8
this.$=[$$[$0]]
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20:
this.$=$$[$0-1]
break;
case 21:
this.$ = new DecVar($$[$0],$$[$0-1],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 22:
this.$ = new DecVar($$[$0-2],$$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 23:
this.$ = new Arreglo($$[$0-3],$$[$0-2],1,[],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 24:
this.$ = new Arreglo($$[$0-7],$$[$0-6],1,$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 25:
this.$ = new Arreglo($$[$0-5],$$[$0-4],2,[[],[]],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 26:
let arr = []; arr.push($$[$0-6]);arr.push($$[$0-2]);this.$ = new Arreglo($$[$0-15],$$[$0-14],2,arr,_$[$0-15].first_line,_$[$0-15].first_column)
break;
case 27: case 36:
$$[$0-2].push($$[$0]);this.$=$$[$0-2]
break;
case 29:
this.$= new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 30: case 31: case 32: case 33: case 34: case 35:
this.$=$$[$0]
break;
case 38:
this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],'Menos',_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 39:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Suma',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 40:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Menos',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 41:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Por',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 42:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Div',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 43:
this.$ = new Aritmetica($$[$0-2],$$[$0],'MOD',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 44:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],'Pow',_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 45:
this.$ = new Acceder($$[$0],_$[$0].first_line,_$[$0].first_column)
break;
case 46:
this.$ = new Primitivo($$[$0],"BOOL",_$[$0].first_line,_$[$0].first_column)
break;
case 47:
this.$ = new Primitivo($$[$0],"STD::STRING",_$[$0].first_line,_$[$0].first_column)
break;
case 48:
this.$ = new Primitivo($$[$0],"CHAR",_$[$0].first_line,_$[$0].first_column)
break;
case 49:
this.$ = new Primitivo($$[$0],"DOUBLE",_$[$0].first_line,_$[$0].first_column)
break;
case 50:
this.$ = new Primitivo($$[$0],"INT",_$[$0].first_line,_$[$0].first_column)
break;
<<<<<<< HEAD
case 51:
this.$ = new Acceder_Arr($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 52:
this.$ = new Acceder_Arr($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 53: case 54:
this.$ = $$[$0]
break;
case 55:
this.$ = $$[$0-1]
break;
case 56: case 57:
this.$ = new Logico($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 58:
this.$ = new Logico(null,$$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 59: case 60: case 61: case 62: case 63: case 64:
this.$ = new Relacionales($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 65:
this.$= new Cout($$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 66:
this.$= new Cout($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 67:
this.$ = new Funciones($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 68:
this.$ = new Funciones($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 69:
this.$ = ({id:$$[$0],tipo:$$[$0-1]})
break;
case 70:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2]
break;
case 72:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 73:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 74:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 76:
this.$ = new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 77:
this.$ = new Bloque([],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 78:
this.$ = new func_if($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 79: case 80:
this.$ = new func_if($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 81:
this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 82:
this.$ = new Break(_$[$0].first_line,_$[$0].first_column)
break;
case 83:
this.$ = new Continue(_$[$0].first_line,_$[$0].first_column)
break;
case 84:
this.$ = new Retorno($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 85:
this.$ = new Decremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 86:
this.$ = new Incremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 87: case 88:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 89:
this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 90:
=======
case 51: case 52:
this.$ = $$[$0]
break;
case 53:
this.$ = $$[$0-1]
break;
case 54: case 55:
this.$ = new Logico($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 56:
this.$ = new Logico(null,$$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 57: case 58: case 59: case 60: case 61: case 62:
this.$ = new Relacionales($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 63:
this.$= new Cout($$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 64:
this.$= new Cout($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 65:
this.$ = new Funciones($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 66:
this.$ = new Funciones($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 67:
this.$ = ({id:$$[$0],tipo:$$[$0-1]})
break;
case 68:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2]
break;
case 70:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 71:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 72:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 74:
this.$ = new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 75:
this.$ = new Bloque([],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 76:
this.$ = new func_if($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 77: case 78:
this.$ = new func_if($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 79:
this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 80:
this.$ = new Break(_$[$0].first_line,_$[$0].first_column)
break;
case 81:
this.$ = new Continue(_$[$0].first_line,_$[$0].first_column)
break;
case 82:
this.$ = new Retorno($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 83:
this.$ = new Decremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 84:
this.$ = new Incremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 85: case 86:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 87:
this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 88:
>>>>>>> feb08420f3d7f1fa17723d7836599f677f8d7bb8
this.$ = new Exec($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
}
},
<<<<<<< HEAD
table: [{2:[1,3],3:1,4:2,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{1:[3]},{5:[1,38],6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{5:[1,40]},o($Vg,[2,4]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{25:57,28:[1,58]},{64:[1,59]},{26:$Vh,39:$Vi,40:$Vj,45:$Vk},{45:[1,64]},{45:[1,65]},{45:[1,66]},{66:67,70:$Vl},{8:[2,82]},{8:[2,83]},{27:69,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{11:82,28:[1,83]},{28:[2,30]},{28:[2,31]},{28:[2,32]},{28:[2,33]},{28:[2,34]},{28:[2,35]},{1:[2,1]},o($Vg,[2,3]),{1:[2,2]},o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{8:[2,21],26:[1,84],32:[1,85]},o($Vw,$Vx,{29:[1,86],45:[1,87]}),{27:88,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:91,28:$Vm,39:$Vn,44:$Vo,45:$Vp,46:[1,89],47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv,69:90},{27:92,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{39:[1,93]},{40:[1,94]},{27:95,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:96,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{7:97,15:98,24:99,28:[1,100],33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6},{74:[1,101]},{4:102,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,71:[1,103],72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{8:[2,84],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{27:117,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{45:[1,118]},o($VL,[2,45],{29:[1,119]}),o($VL,[2,46]),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,53]),o($VL,[2,54]),{27:120,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:121,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{8:[2,90]},{45:$Vk},{27:122,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{28:[1,123]},{30:[1,124]},{24:128,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,46:[1,125],67:126,68:127},{8:[2,65],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,64:[1,129]},{8:[2,72]},{32:[1,131],46:[1,130]},o($VM,[2,75],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{8:[2,29],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($VN,[2,85]),o($VN,[2,86]),{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,132],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,133],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{8:[1,134]},{8:[1,135]},{25:57,28:[1,136]},{26:$Vh},{45:[1,137]},{6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,71:[1,138],72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($VO,[2,77]),{27:139,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:140,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:141,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:142,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:143,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:144,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:145,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:146,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:147,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:148,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:149,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:150,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:151,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},o($VL,[2,38]),{27:152,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{51:[1,153]},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,154],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o([8,30,32,46,64],[2,58],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{8:[2,22],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vw,[2,36]),{8:[2,23],26:[1,155],29:[1,156]},{66:157,70:$Vl},{32:[1,159],46:[1,158]},o($VM,[2,71]),{28:[1,160]},{65:[1,161]},{8:[2,73]},{27:162,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{66:163,70:$Vl},{66:164,70:$Vl},{27:165,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:166,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},o($Vw,$Vx),{27:167,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},o($VO,[2,76]),o($VP,[2,39],{41:$VA,42:$VB,43:$VC}),o($VP,[2,40],{41:$VA,42:$VB,43:$VC}),o($VL,[2,41]),o($VL,[2,42]),o($VL,[2,43]),o([8,30,32,46,54,55,64],[2,56],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o([8,30,32,46,55,64],[2,57],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VQ,[2,59],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,60],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,61],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,62],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,63],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,64],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),{32:[1,168],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{30:[1,169]},o($VL,[2,55]),{29:[1,170]},{30:[1,171]},{8:[2,67]},{66:172,70:$Vl},{24:128,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,68:173},o($VM,[2,69]),{8:[2,66]},o($VM,[2,74],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{8:[2,78],73:[1,174]},{8:[2,81]},{8:[1,175],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{8:[1,176],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,177],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{27:178,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},o($VL,[2,51],{29:[1,179]}),{27:181,28:$Vm,31:180,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{8:[2,25],26:[1,182]},{8:[2,68]},o($VM,[2,70]),{13:184,66:183,70:$Vl,72:$V8},{22:185,28:[1,186]},{21:187,28:[1,188]},{8:[2,89]},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,189],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{51:[1,190]},{30:[1,191],32:$VR},o($VS,[2,28],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{29:[1,193]},{8:[2,79]},{8:[2,80]},{46:[1,194]},{40:$Vj},{46:[1,195]},{39:$Vi},o($VL,[2,44]),{30:[1,196]},{8:[2,24]},{27:197,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{29:[1,198]},{66:199,70:$Vl},{66:200,70:$Vl},o($VL,[2,52]),o($VS,[2,27],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{27:181,28:$Vm,31:201,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{8:[2,87]},{8:[2,88]},{30:[1,202],32:$VR},{32:[1,203]},{29:[1,204]},{27:181,28:$Vm,31:205,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{30:[1,206],32:$VR},{30:[1,207]},{8:[2,26]}],
defaultActions: {28:[2,82],29:[2,83],32:[2,30],33:[2,31],34:[2,32],35:[2,33],36:[2,34],37:[2,35],38:[2,1],40:[2,2],82:[2,90],89:[2,72],130:[2,73],157:[2,67],161:[2,66],164:[2,81],172:[2,68],177:[2,89],183:[2,79],184:[2,80],191:[2,24],199:[2,87],200:[2,88],207:[2,26]},
=======
table: [{2:[1,3],3:1,4:2,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{1:[3]},{5:[1,38],6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{5:[1,40]},o($Vg,[2,4]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{25:57,28:[1,58]},{64:[1,59]},{26:$Vh,39:$Vi,40:$Vj,45:$Vk},{45:[1,64]},{45:[1,65]},{45:[1,66]},{66:67,70:$Vl},{8:[2,80]},{8:[2,81]},{27:69,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{11:82,28:[1,83]},{28:[2,30]},{28:[2,31]},{28:[2,32]},{28:[2,33]},{28:[2,34]},{28:[2,35]},{1:[2,1]},o($Vg,[2,3]),{1:[2,2]},o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{8:[2,21],26:[1,84],32:[1,85]},o($Vw,$Vx,{29:[1,86],45:[1,87]}),{27:88,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:91,28:$Vm,39:$Vn,44:$Vo,45:$Vp,46:[1,89],47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv,69:90},{27:92,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{39:[1,93]},{40:[1,94]},{27:95,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:96,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{7:97,15:98,24:99,28:[1,100],33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6},{74:[1,101]},{4:102,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,71:[1,103],72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{8:[2,82],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{27:117,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{45:[1,118]},o($VL,[2,45]),o($VL,[2,46]),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),{27:119,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:120,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{8:[2,88]},{45:$Vk},{27:121,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{28:[1,122]},{30:[1,123]},{24:127,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,46:[1,124],67:125,68:126},{8:[2,63],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,64:[1,128]},{8:[2,70]},{32:[1,130],46:[1,129]},o($VM,[2,73],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{8:[2,29],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($VN,[2,83]),o($VN,[2,84]),{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,131],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,132],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{8:[1,133]},{8:[1,134]},{25:57,28:[1,135]},{26:$Vh},{45:[1,136]},{6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,63:$V7,71:[1,137],72:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($VO,[2,75]),{27:138,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:139,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:140,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:141,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:142,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:143,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:144,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:145,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:146,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:147,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:148,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:149,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:150,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},o($VL,[2,38]),{27:151,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,152],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o([8,30,32,46,64],[2,56],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{8:[2,22],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vw,[2,36]),{8:[2,23],26:[1,153],29:[1,154]},{66:155,70:$Vl},{32:[1,157],46:[1,156]},o($VM,[2,69]),{28:[1,158]},{65:[1,159]},{8:[2,71]},{27:160,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{66:161,70:$Vl},{66:162,70:$Vl},{27:163,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:164,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},o($Vw,$Vx),{27:165,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},o($VO,[2,74]),o($VP,[2,39],{41:$VA,42:$VB,43:$VC}),o($VP,[2,40],{41:$VA,42:$VB,43:$VC}),o($VL,[2,41]),o($VL,[2,42]),o($VL,[2,43]),o([8,30,32,46,54,55,64],[2,54],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o([8,30,32,46,55,64],[2,55],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VQ,[2,57],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,58],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,59],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,60],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,61],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),o($VQ,[2,62],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC}),{32:[1,166],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($VL,[2,53]),{29:[1,167]},{30:[1,168]},{8:[2,65]},{66:169,70:$Vl},{24:127,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,68:170},o($VM,[2,67]),{8:[2,64]},o($VM,[2,72],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{8:[2,76],73:[1,171]},{8:[2,79]},{8:[1,172],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{8:[1,173],39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,174],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{27:175,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{27:177,28:$Vm,31:176,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{8:[2,25],26:[1,178]},{8:[2,66]},o($VM,[2,68]),{13:180,66:179,70:$Vl,72:$V8},{22:181,28:[1,182]},{21:183,28:[1,184]},{8:[2,87]},{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,46:[1,185],54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{30:[1,186],32:$VR},o($VS,[2,28],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{29:[1,188]},{8:[2,77]},{8:[2,78]},{46:[1,189]},{40:$Vj},{46:[1,190]},{39:$Vi},o($VL,[2,44]),{8:[2,24]},{27:191,28:$Vm,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{29:[1,192]},{66:193,70:$Vl},{66:194,70:$Vl},o($VS,[2,27],{39:$Vy,40:$Vz,41:$VA,42:$VB,43:$VC,54:$VD,55:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{27:177,28:$Vm,31:195,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{8:[2,85]},{8:[2,86]},{30:[1,196],32:$VR},{32:[1,197]},{29:[1,198]},{27:177,28:$Vm,31:199,39:$Vn,44:$Vo,45:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:78,53:79,56:$Vv},{30:[1,200],32:$VR},{30:[1,201]},{8:[2,26]}],
defaultActions: {28:[2,80],29:[2,81],32:[2,30],33:[2,31],34:[2,32],35:[2,33],36:[2,34],37:[2,35],38:[2,1],40:[2,2],82:[2,88],89:[2,70],129:[2,71],155:[2,65],159:[2,64],162:[2,79],169:[2,66],174:[2,87],179:[2,77],180:[2,78],186:[2,24],193:[2,85],194:[2,86],201:[2,26]},
>>>>>>> feb08420f3d7f1fa17723d7836599f677f8d7bb8
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {AST} = require("../Interprete/AST/AST.js")
    const {DecVar} = require("../Interprete/Instrucciones/variables/DecVar.js")
    const {Asignacion} = require("../Interprete/Instrucciones/variables/Asignacion")
    const {Primitivo} = require("../Interprete/Expresion/Primitivo")
    const {Aritmetica} = require("../Interprete/Expresion/Aritmeticas")
    const {Cout} = require("../Interprete/Instrucciones/Cout")
    const {Acceder} = require("../Interprete/Expresion/Acceder")
    const {Acceder_Arr} = require("../Interprete/Expresion/Acceder_arr")
    const {Logico} = require("../Interprete/Expresion/logicos")
    const {Relacionales} = require("../Interprete/Expresion/Relacionales")
    const {TypeData} = require("../Interprete/Enums/TipoDato")
    const {Funciones}  = require("../Interprete/Instrucciones/Func/funciones")
    const {Bloque}  = require("../Interprete/Instrucciones/bloque")
    const {Llamada} = require("../Interprete/Instrucciones/llamada")
    const {func_if} = require("../Interprete/Instrucciones/Control/if")
    const {Break} = require("../Interprete/Instrucciones/Control/Break")
    const {Continue} = require("../Interprete/Instrucciones/Control/continue")
    const {Retorno} = require("../Interprete/Instrucciones/Control/return")
    const {While} = require("../Interprete/Instrucciones/Ciclos/while")
    const {DoWhile} = require("../Interprete/Instrucciones/Ciclos/DoWhile")
    const {For} = require("../Interprete/Instrucciones/Ciclos/For")
    const {Incremento} = require("../Interprete/Expresion/incremento")
    const {Decremento} = require("../Interprete/Expresion/decremento")
    const {Exec} = require("../Interprete/Instrucciones/Func/Exec.js")
    const {Arreglo} = require("../Interprete/Expresion/Array")
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments one line*/
break;
case 1:/*skip comments with multiple lines*/
break;
case 2:/* skip whitespace */
break;
case 3:return 33;
break;
case 4:return 35;
break;
case 5:return 36;
break;
case 6:return 34;
break;
case 7:return 38
break;
case 8:return 37;
break;
case 9:return 63
break;
case 10:return 65
break;
case 11:return 44
break;
case 12:return 72
break;
case 13:return 73
break;
case 14:return 74
break;
case 15:return 78
break;
case 16:return 79
break;
case 17:return 75
break;
case 18:return 76
break;
case 19:return 77
break;
case 20:return 80
break;
case 21:return 8;
break;
case 22:return 32;
break;
case 23:return 64;
break;
case 24:return 40;
break;
case 25:return 39;
break;
case 26:return 41;
break;
case 27:return 42;
break;
case 28:return 43
break;
case 29:return 45;
break;
case 30:return 46;
break;
case 31:return 55
break;
case 32:return 54
break;
case 33:return 56
break;
case 34:return 60
break;
case 35:return 59
break;
case 36:return 61
break;
case 37:return 62
break;
case 38:return 26;
break;
case 39:return 57
break;
case 40:return 58
break;
case 41:return 70
break;
case 42:return 71
break;
case 43:return 29
break;
case 44:return 30
break;
case 45:return 47;
break;
case 46:return 28;
break;
case 47:return 50;
break;
case 48:return 51;
break;
case 49:return 48;
break;
case 50:return 49;    
break;
case 51:return 5;
break;
case 52: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:Void\b)/i,/^(?:std::string\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:DO\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:Return\b)/i,/^(?:EXECUTE\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:<<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:true|false\b)/i,/^(?:[a-zA-Z]+[0-9]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[-+]?[0-9]+\b)/i,/^(?:".*")/i,/^(?:'[a-zA-Z]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}