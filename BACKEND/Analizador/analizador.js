/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,35],$V2=[1,36],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,24],$V8=[1,26],$V9=[1,27],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,28],$Ve=[1,29],$Vf=[1,33],$Vg=[1,34],$Vh=[5,30,35,36,37,38,39,40,66,73,74,76,77,78,79,80,81,82,83],$Vi=[1,66],$Vj=[1,68],$Vk=[1,69],$Vl=[1,65],$Vm=[1,74],$Vn=[1,78],$Vo=[1,76],$Vp=[1,77],$Vq=[1,86],$Vr=[1,79],$Vs=[1,80],$Vt=[1,81],$Vu=[1,82],$Vv=[1,83],$Vw=[1,87],$Vx=[8,28,34],$Vy=[2,39],$Vz=[1,113],$VA=[1,112],$VB=[1,114],$VC=[1,115],$VD=[1,116],$VE=[1,117],$VF=[1,118],$VG=[1,119],$VH=[1,120],$VI=[1,121],$VJ=[1,122],$VK=[1,123],$VL=[1,124],$VM=[8,32,34,41,42,43,44,45,48,57,58,60,61,62,63,64,65,67],$VN=[1,141],$VO=[34,48],$VP=[8,48],$VQ=[8,75,76],$VR=[8,32,34,41,42,48,57,58,60,61,62,63,64,65,67],$VS=[8,32,34,48,57,58,60,61,62,63,64,65,67],$VT=[1,215],$VU=[32,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"star":3,"instrucciones":4,"EOF":5,"ins":6,"declarar":7,"PYC":8,"declarar_arr":9,"print":10,"llamada_func":11,"fn_func":12,"func_if":13,"c_while":14,"asign":15,"asignArr":16,"c_for":17,"c_dowhile":18,"ins_break":19,"ins_conti":20,"ins_ret":21,"fun_dec":22,"fun_inc":23,"func_exec":24,"fun_switch":25,"tipo":26,"ids":27,"IG":28,"exp":29,"ID":30,"CORCHIZQ":31,"CORCHDER":32,"list_val":33,"COMA":34,"INT":35,"CHAR":36,"DOUBLE":37,"BOOL":38,"STD_STRING":39,"VOID":40,"MENOS":41,"MAS":42,"POR":43,"DIV":44,"MOD":45,"POW":46,"PARIZQ":47,"PARDER":48,"V_BOOL":49,"V_CADENA":50,"V_CHAR":51,"V_DOUBLE":52,"V_INT":53,"list_exp":54,"oplogicos":55,"oprelacionales":56,"AND":57,"OR":58,"NOT":59,"MAQ":60,"MEQ":61,"MAOIGQ":62,"MEOIGQ":63,"DIFQ":64,"IGQ":65,"COUT":66,"DPA":67,"ENDL":68,"bloque":69,"params":70,"param":71,"CORIZQ":72,"CORDER":73,"IF":74,"ELSE":75,"WHILE":76,"BREAK":77,"CONTINUE":78,"RETURN":79,"FOR":80,"DO":81,"EXECUTE":82,"SWITCH":83,"l_cases":84,"defa":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",28:"IG",30:"ID",31:"CORCHIZQ",32:"CORCHDER",34:"COMA",35:"INT",36:"CHAR",37:"DOUBLE",38:"BOOL",39:"STD_STRING",40:"VOID",41:"MENOS",42:"MAS",43:"POR",44:"DIV",45:"MOD",46:"POW",47:"PARIZQ",48:"PARDER",49:"V_BOOL",50:"V_CADENA",51:"V_CHAR",52:"V_DOUBLE",53:"V_INT",57:"AND",58:"OR",59:"NOT",60:"MAQ",61:"MEQ",62:"MAOIGQ",63:"MEOIGQ",64:"DIFQ",65:"IGQ",66:"COUT",67:"DPA",68:"ENDL",72:"CORIZQ",73:"CORDER",74:"IF",75:"ELSE",76:"WHILE",77:"BREAK",78:"CONTINUE",79:"RETURN",80:"FOR",81:"DO",82:"EXECUTE",83:"SWITCH",84:"l_cases",85:"defa"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[7,2],[7,4],[9,4],[9,8],[9,6],[9,16],[33,3],[33,1],[15,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,3],[27,1],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,6],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,4],[29,7],[29,3],[29,4],[29,1],[29,1],[29,3],[55,3],[55,3],[55,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[10,3],[10,5],[12,5],[12,6],[71,2],[70,3],[70,1],[11,3],[11,4],[54,3],[54,1],[69,3],[69,2],[13,5],[13,7],[13,7],[14,5],[19,1],[20,1],[21,2],[22,3],[23,3],[17,9],[17,9],[18,6],[24,2],[16,6],[16,9],[25,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new AST($$[$0-1]);
break;
case 2:
console.log('Error Sintactico: ' + yytext + ' - linea: ' + this._$.first_line  + ' - columna: ' + this._$.first_column);
break;
case 3:
$$[$0-1].push($$[$0]);this.$=$$[$0-1] 
break;
case 4: case 30: case 39: case 75: case 79:
this.$=[$$[$0]]
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22:
this.$=$$[$0-1]
break;
case 23:
this.$ = new DecVar($$[$0],$$[$0-1],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 24:
this.$ = new DecVar($$[$0-2],$$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 25:
this.$ = new Arreglo($$[$0-3],$$[$0-2],1,[],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 26:
this.$ = new Arreglo($$[$0-7],$$[$0-6],1,$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 27:
this.$ = new Arreglo($$[$0-5],$$[$0-4],2,[[],[]],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 28:
let arr = []; arr.push($$[$0-6]);arr.push($$[$0-2]);this.$ = new Arreglo($$[$0-15],$$[$0-14],2,arr,_$[$0-15].first_line,_$[$0-15].first_column)
break;
case 29: case 38:
$$[$0-2].push($$[$0]);this.$=$$[$0-2]
break;
case 31:
this.$= new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 32: case 33: case 34: case 35: case 36: case 37:
this.$=$$[$0]
break;
case 40:
this.$ = new Aritmetica(new Primitivo(0,0,0),$$[$0],'Menos',_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 41:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Suma',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 42:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Menos',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 43:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Por',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 44:
this.$ = new Aritmetica($$[$0-2],$$[$0],'Div',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 45:
this.$ = new Aritmetica($$[$0-2],$$[$0],'MOD',_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 46:
this.$ = new Aritmetica($$[$0-3],$$[$0-1],'Pow',_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 47:
this.$ = new Acceder($$[$0],_$[$0].first_line,_$[$0].first_column)
break;
case 48:
this.$ = new Primitivo($$[$0],"BOOL",_$[$0].first_line,_$[$0].first_column)
break;
case 49:
this.$ = new Primitivo($$[$0],"STD::STRING",_$[$0].first_line,_$[$0].first_column)
break;
case 50:
this.$ = new Primitivo($$[$0],"CHAR",_$[$0].first_line,_$[$0].first_column)
break;
case 51:
this.$ = new Primitivo($$[$0],"DOUBLE",_$[$0].first_line,_$[$0].first_column)
break;
case 52:
this.$ = new Primitivo($$[$0],"INT",_$[$0].first_line,_$[$0].first_column)
break;
case 53:
this.$ = new Acceder_Arr($$[$0-3],1,$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 54:
this.$ = new Acceder_Arr($$[$0-6],2,$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 55: case 76:
this.$ = new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 56: case 77:
this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 57: case 58:
this.$ = $$[$0]
break;
case 59:
this.$ = $$[$0-1]
break;
case 60: case 61:
this.$ = new Logico($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 62:
this.$ = new Logico(null,$$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 63: case 64: case 65: case 66: case 67: case 68:
this.$ = new Relacionales($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 69:
this.$= new Cout($$[$0],false,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 70:
this.$= new Cout($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 71:
this.$ = new Funciones($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 72:
this.$ = new Funciones($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 73:
this.$ = ({id:$$[$0],tipo:$$[$0-1]})
break;
case 74:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2]
break;
case 78:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 80:
this.$ = new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 81:
this.$ = new Bloque([],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 82:
this.$ = new func_if($$[$0-2],$$[$0],null,_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 83: case 84:
this.$ = new func_if($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 85:
this.$ = new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 86:
this.$ = new Break(_$[$0].first_line,_$[$0].first_column)
break;
case 87:
this.$ = new Continue(_$[$0].first_line,_$[$0].first_column)
break;
case 88:
this.$ = new Retorno($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 89:
this.$ = new Decremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 90:
this.$ = new Incremento($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 91: case 92:
this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 93:
this.$ = new DoWhile($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 94:
this.$ = new Exec($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 95:
this.$ = new ModiArr($$[$0-5],1,$$[$0-3],null,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 96:
this.$ = new ModiArr($$[$0-8],2,$$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column)
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,30:$V0,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,66:$V7,74:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,80:$Vd,81:$Ve,82:$Vf,83:$Vg},{1:[3]},{5:[1,41],6:42,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,30:$V0,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,66:$V7,74:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,80:$Vd,81:$Ve,82:$Vf,83:$Vg},{5:[1,43]},o($Vh,[2,4]),{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{27:62,30:[1,63]},{67:[1,64]},{28:$Vi,31:[1,67],41:$Vj,42:$Vk,47:$Vl},{47:[1,70]},{47:[1,71]},{47:[1,72]},{69:73,72:$Vm},{8:[2,86]},{8:[2,87]},{29:75,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{11:88,30:[1,89]},{47:[1,90]},{30:[2,32]},{30:[2,33]},{30:[2,34]},{30:[2,35]},{30:[2,36]},{30:[2,37]},{1:[2,1]},o($Vh,[2,3]),{1:[2,2]},o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),{8:[2,23],28:[1,91],34:[1,92]},o($Vx,$Vy,{31:[1,93],47:[1,94]}),{29:95,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:98,30:$Vn,41:$Vo,46:$Vp,47:$Vq,48:[1,96],49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:97,55:84,56:85,59:$Vw},{29:99,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:100,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{41:[1,101]},{42:[1,102]},{29:103,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:104,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{7:105,15:106,26:107,30:[1,108],35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6},{76:[1,109]},{4:110,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,30:$V0,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,66:$V7,73:[1,111],74:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,80:$Vd,81:$Ve,82:$Vf,83:$Vg},{8:[2,88],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{29:125,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{47:[1,126]},o($VM,[2,47],{31:[1,127],47:[1,128]}),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,50]),o($VM,[2,51]),o($VM,[2,52]),o($VM,[2,57]),o($VM,[2,58]),{29:129,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:130,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{8:[2,94]},{47:$Vl},{30:[1,131]},{29:132,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{30:[1,133]},{32:[1,134]},{26:138,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,48:[1,135],70:136,71:137},{8:[2,69],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,67:[1,139]},{8:[2,76]},{34:$VN,48:[1,140]},o($VO,[2,79],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{8:[2,31],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{32:[1,142],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($VP,[2,89]),o($VP,[2,90]),{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,48:[1,143],57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,48:[1,144],57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{8:[1,145]},{8:[1,146]},{27:62,30:[1,147]},{28:$Vi},{47:[1,148]},{6:42,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,30:$V0,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,66:$V7,73:[1,149],74:$V8,76:$V9,77:$Va,78:$Vb,79:$Vc,80:$Vd,81:$Ve,82:$Vf,83:$Vg},o($VQ,[2,81]),{29:150,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:151,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:152,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:153,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:154,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:155,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:156,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:157,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:158,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:159,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:160,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:161,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:162,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},o($VM,[2,40]),{29:163,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:164,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:98,30:$Vn,41:$Vo,46:$Vp,47:$Vq,48:[1,165],49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:166,55:84,56:85,59:$Vw},{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,48:[1,167],57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o([8,32,34,48,67],[2,62],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{48:[1,168]},{8:[2,24],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($Vx,[2,38]),{8:[2,25],28:[1,169],31:[1,170]},{69:171,72:$Vm},{34:[1,173],48:[1,172]},o($VO,[2,75]),{30:[1,174]},{68:[1,175]},{8:[2,77]},{29:176,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{28:[1,177],31:[1,178]},{69:179,72:$Vm},{69:180,72:$Vm},{29:181,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:182,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},o($Vx,$Vy),{29:183,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},o($VQ,[2,80]),o($VR,[2,41],{43:$VB,44:$VC,45:$VD}),o($VR,[2,42],{43:$VB,44:$VC,45:$VD}),o($VM,[2,43]),o($VM,[2,44]),o($VM,[2,45]),o([8,32,34,48,57,58,67],[2,60],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),o([8,32,34,48,58,67],[2,61],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),o($VS,[2,63],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VS,[2,64],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VS,[2,65],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VS,[2,66],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VS,[2,67],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VS,[2,68],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),{34:[1,184],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{32:[1,185],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($VM,[2,55]),{34:$VN,48:[1,186]},o($VM,[2,59]),{72:[1,187]},{31:[1,188]},{32:[1,189]},{8:[2,71]},{69:190,72:$Vm},{26:138,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,71:191},o($VO,[2,73]),{8:[2,70]},o($VO,[2,78],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{29:192,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{29:193,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{8:[2,82],75:[1,194]},{8:[2,85]},{8:[1,195],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{8:[1,196],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,48:[1,197],57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{29:198,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},o($VM,[2,53],{31:[1,199]}),o($VM,[2,56]),{84:[1,200]},{29:202,30:$Vn,33:201,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{8:[2,27],28:[1,203]},{8:[2,72]},o($VO,[2,74]),{8:[2,95],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{32:[1,204],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{13:206,69:205,72:$Vm,74:$V8},{23:207,30:[1,208]},{22:209,30:[1,210]},{8:[2,93]},{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,48:[1,211],57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{29:212,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{85:[1,213]},{32:[1,214],34:$VT},o($VU,[2,30],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{31:[1,216]},{28:[1,217]},{8:[2,83]},{8:[2,84]},{48:[1,218]},{42:$Vk},{48:[1,219]},{41:$Vj},o($VM,[2,46]),{32:[1,220],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{73:[1,221]},{8:[2,26]},{29:222,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{31:[1,223]},{29:224,30:$Vn,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{69:225,72:$Vm},{69:226,72:$Vm},o($VM,[2,54]),{8:[2,97]},o($VU,[2,29],{41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{29:202,30:$Vn,33:227,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{8:[2,96],41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,57:$VE,58:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{8:[2,91]},{8:[2,92]},{32:[1,228],34:$VT},{34:[1,229]},{31:[1,230]},{29:202,30:$Vn,33:231,41:$Vo,46:$Vp,47:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,55:84,56:85,59:$Vw},{32:[1,232],34:$VT},{32:[1,233]},{8:[2,28]}],
defaultActions: {30:[2,86],31:[2,87],35:[2,32],36:[2,33],37:[2,34],38:[2,35],39:[2,36],40:[2,37],41:[2,1],43:[2,2],88:[2,94],96:[2,76],140:[2,77],171:[2,71],175:[2,70],180:[2,85],190:[2,72],197:[2,93],205:[2,83],206:[2,84],214:[2,26],221:[2,97],225:[2,91],226:[2,92],233:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {AST} = require("../Interprete/AST/AST.js")
    const {DecVar} = require("../Interprete/Instrucciones/variables/DecVar.js")
    const {Asignacion} = require("../Interprete/Instrucciones/variables/Asignacion")
    const {Primitivo} = require("../Interprete/Expresion/Primitivo")
    const {Aritmetica} = require("../Interprete/Expresion/Aritmeticas")
    const {Cout} = require("../Interprete/Instrucciones/Cout")
    const {Acceder} = require("../Interprete/Expresion/Acceder")
    const {Acceder_Arr} = require("../Interprete/Expresion/Acceder_arr")
    const {Logico} = require("../Interprete/Expresion/logicos")
    const {Relacionales} = require("../Interprete/Expresion/Relacionales")
    const {TypeData} = require("../Interprete/Enums/TipoDato")
    const {Funciones}  = require("../Interprete/Instrucciones/Func/funciones")
    const {Bloque}  = require("../Interprete/Instrucciones/bloque")
    const {Llamada} = require("../Interprete/Instrucciones/llamada")
    const {func_if} = require("../Interprete/Instrucciones/Control/if")
    const {Break} = require("../Interprete/Instrucciones/Control/Break")
    const {Continue} = require("../Interprete/Instrucciones/Control/continue")
    const {Retorno} = require("../Interprete/Instrucciones/Control/return")
    const {While} = require("../Interprete/Instrucciones/Ciclos/while")
    const {DoWhile} = require("../Interprete/Instrucciones/Ciclos/DoWhile")
    const {For} = require("../Interprete/Instrucciones/Ciclos/For")
    const {Incremento} = require("../Interprete/Expresion/incremento")
    const {Decremento} = require("../Interprete/Expresion/decremento")
    const {Exec} = require("../Interprete/Instrucciones/Func/Exec.js")
    const {Arreglo} = require("../Interprete/Expresion/Array")
    const {ModiArr} = require("../Interprete/Instrucciones/variables/modiArray")
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments one line*/
break;
case 1:/*skip comments with multiple lines*/
break;
case 2:/* skip whitespace */
break;
case 3:return 35;
break;
case 4:return 37;
break;
case 5:return 38;
break;
case 6:return 36;
break;
case 7:return 40
break;
case 8:return 39;
break;
case 9:return 66
break;
case 10:return 68
break;
case 11:return 46
break;
case 12:return 74
break;
case 13:return 75
break;
case 14:return 76
break;
case 15:return 80
break;
case 16:return 81
break;
case 17:return 77
break;
case 18:return 78
break;
case 19:return 79
break;
case 20:return 82
break;
case 21:return 83
break;
case 22:return 8;
break;
case 23:return 34;
break;
case 24:return 67;
break;
case 25:return 42;
break;
case 26:return 41;
break;
case 27:return 43;
break;
case 28:return 44;
break;
case 29:return 45
break;
case 30:return 47;
break;
case 31:return 48;
break;
case 32:return 58
break;
case 33:return 57
break;
case 34:return 59
break;
case 35:return 63
break;
case 36:return 62
break;
case 37:return 64
break;
case 38:return 65
break;
case 39:return 28;
break;
case 40:return 60
break;
case 41:return 61
break;
case 42:return 72
break;
case 43:return 73
break;
case 44:return 31
break;
case 45:return 32
break;
case 46:return 49;
break;
case 47:return 30;
break;
case 48:return 52;
break;
case 49:return 53;
break;
case 50:return 50;
break;
case 51:return 51;    
break;
case 52:return 5;
break;
case 53: console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:Void\b)/i,/^(?:std::string\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:DO\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:Return\b)/i,/^(?:EXECUTE\b)/i,/^(?:SWITCH\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:<<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:true|false\b)/i,/^(?:[a-zA-Z]+[0-9]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[-+]?[0-9]+\b)/i,/^(?:".*")/i,/^(?:'[a-zA-Z]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}